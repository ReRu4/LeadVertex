// ==UserScript==
// @name         –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ üîç
// @namespace    http://tampermonkey.net/
// @version      2.9.3
// @description  –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–∑–≤–æ–Ω–∞
// @author       ReRu (@Ruslan_Intertrade)
// @match        *://leadvertex.ru/admin/callmodeNew/settings.html?category=*
// @match        *://leadvertex.ru/admin/callmodeNew/rules.html*
// @grant        GM_xmlhttpRequest
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_registerMenuCommand
// @updateURL    https://raw.githubusercontent.com/ReRu4/LeadVertex/main/Access_Operators.js
// @downloadURL  https://raw.githubusercontent.com/ReRu4/LeadVertex/main/Access_Operators.js
// ==/UserScript==
(function () {
    'use strict';

    const CONCURRENT_LIMIT = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const swap = "accessConfig";

    function decrypt(encrypted, secret) {
        if (!encrypted || !secret) return null;
        let decrypted = '';
        for (let i = 0; i < encrypted.length; i++) {
            decrypted += String.fromCharCode(encrypted.charCodeAt(i) ^ secret.charCodeAt(i % secret.length));
        }
        return decrypted;
    }

    GM_registerMenuCommand('üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', () => {
        const encryptedKey = prompt('–®–∞–≥ 1/2: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞:');
        if (!encryptedKey) {
            return;
        }

        const secret = prompt('–®–∞–≥ 2/2: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (—Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É):');
        if (!secret) {
            alert('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.');
            return;
        }

        GM_setValue(swap, { encryptedKey, secret });
        location.reload();
    });

    GM_registerMenuCommand('‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–∞?')) {
            GM_setValue(swap, null);
            location.reload();
        }
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    const debug = (message, data) => {
        const timestamp = new Date().toLocaleTimeString();
        if (data) {
            console.log(`[DEBUG ${timestamp}]`, message, data);
        } else {
            console.log(`[DEBUG ${timestamp}]`, message);
        }
    };

    debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞');

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å GitHub
    async function loadProjectCategories() {
        const url = 'https://raw.githubusercontent.com/ReRu4/LeadVertex/refs/heads/main/projects.md';

        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'GET',
                url: url,
                onload: (response) => {
                    if (response.status === 200) {
                        try {
                            const categories = parseProjectData(response.responseText);
                            resolve(categories);
                        } catch (e) {
                            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:', e);
                            resolve(new Map()); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                        }
                    } else {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:', response.statusText);
                        resolve(new Map());
                    }
                },
                onerror: (err) => {
                    console.error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:', err);
                    resolve(new Map());
                }
            });
        });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    function parseProjectData(data) {
        const lines = data.split('\n');
        const categories = new Map();

        for (const line of lines) {
            const parts = line.split('\t').map(part => part.trim());

            if (parts.length >= 2) {
                const category = parts[0];
                const project = parts[1];

                if (category && project && category !== '--' && !category.includes('--')) {
                    if (!categories.has(category)) {
                        categories.set(category, []);
                    }
                    categories.get(category).push(project);
                }
            }
        }

        return categories;
    }

    const columnMap15 = {
        1: { group: "1", type: "0" },
        2: { group: "1", type: "1" },
        3: { group: "1", type: "2" },
        4: { group: "2", type: "0" },
        5: { group: "2", type: "1" },
        6: { group: "2", type: "2" },
        7: { group: "3", type: "0" },
        8: { group: "3", type: "1" },
        9: { group: "3", type: "2" },
        10: { group: "4", type: "0" },
        11: { group: "4", type: "1" },
        12: { group: "4", type: "2" },
        13: { group: "5", type: "0" },
        14: { group: "5", type: "1" },
        15: { group: "5", type: "2" },
    };



    const columnMap9 = {
        1: { group: "1", type: "0" },
        2: { group: "1", type: "1" },
        3: { group: "1", type: "2" },
        4: { group: "4", type: "0" },
        5: { group: "4", type: "1" },
        6: { group: "4", type: "2" },
        7: { group: "5", type: "0" },
        8: { group: "5", type: "1" },
        9: { group: "5", type: "2" },
    };

    let projectCategories = new Map();
    let operatorsCache = {};
    const rulesCache = new Map();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    const addGlobalStyle = (css) => {
        const head = document.getElementsByTagName('head')[0];
        if (!head) return;
        const style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = css;
        head.appendChild(style);
    };

    addGlobalStyle(`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

        :root {
            --primary-gradient: linear-gradient(135deg, #10b981 0%, #059669 100%);
            --primary-color: #10b981;
            --primary-dark: #059669;
            --secondary-gradient: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            --accent-gradient: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            --danger-gradient: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            --dark-bg: #1f2937;
            --darker-bg: #111827;
            --card-bg: #ffffff;
            --text-color: #1f2937;
            --text-muted: #6b7280;
            --border-color: #e5e7eb;
            --hover-bg: #f9fafb;
            --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --shadow-glow: 0 0 20px rgba(16, 185, 129, 0.4);
            --shadow-glow-purple: 0 0 20px rgba(139, 92, 246, 0.4);
        }

        @keyframes slideInRight {
            from {
                transform: translateX(100%) translateY(-50%);
                opacity: 0;
            }
            to {
                transform: translateX(0) translateY(-50%);
                opacity: 1;
            }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes shimmer {
            0% { background-position: -1000px 0; }
            100% { background-position: 1000px 0; }
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-5px); }
        }

        .access-panel {
            position: fixed;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
            background: var(--card-bg);
            border-radius: 20px;
            box-shadow: var(--shadow-xl);
            padding: 28px;
            z-index: 9999;
            width: 340px;
            max-height: 90vh;
            overflow-y: auto;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            color: var(--text-color);
            display: flex;
            flex-direction: column;
            gap: 18px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            animation: slideInRight 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid var(--border-color);
        }

        .access-panel::-webkit-scrollbar {
            width: 8px;
        }

        .access-panel::-webkit-scrollbar-track {
            background: #f3f4f6;
            border-radius: 10px;
        }

        .access-panel::-webkit-scrollbar-thumb {
            background: var(--primary-gradient);
            border-radius: 10px;
        }

        .access-panel.shifted {
            right: 360px;
        }

        .operator-search-panel {
            position: fixed;
            top: 50%;
            transform: translateY(-50%);
            right: 20px;
            width: 660px;
            background: var(--card-bg);
            border-radius: 20px;
            box-shadow: var(--shadow-xl);
            padding: 28px;
            z-index: 9998;
            max-height: 90vh;
            overflow-y: auto;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            color: var(--text-color);
            display: flex;
            flex-direction: column;
            gap: 18px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            opacity: 0;
            pointer-events: none;
            border: 1px solid var(--border-color);
        }

        .operator-search-panel::-webkit-scrollbar {
            width: 8px;
        }

        .operator-search-panel::-webkit-scrollbar-track {
            background: #f3f4f6;
            border-radius: 10px;
        }

        .operator-search-panel::-webkit-scrollbar-thumb {
            background: var(--primary-gradient);
            border-radius: 10px;
        }

        .operator-search-panel.visible {
            right: 380px;
            opacity: 1;
            pointer-events: auto;
            animation: slideInRight 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .search-results-container {
            border: 2px solid var(--border-color);
            border-radius: 16px;
            padding: 18px;
            margin-top: 14px;
            max-height: 45vh;
            overflow-y: auto;
            background: #f9fafb;
            box-shadow: inset var(--shadow-sm);
        }

        .search-results-container::-webkit-scrollbar {
            width: 6px;
        }

        .search-results-container::-webkit-scrollbar-thumb {
            background: var(--primary-gradient);
            border-radius: 10px;
        }

        .operator-group {
            margin-bottom: 14px;
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 14px;
            transition: all 0.3s ease;
        }

        .operator-group:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .operator-group-header {
            font-weight: 600;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            border-radius: 12px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            background: white;
            border: 2px solid var(--border-color);
        }

        .operator-group-header:hover {
            border-color: var(--primary-color);
            box-shadow: var(--shadow-md), var(--shadow-glow);
            transform: translateY(-2px);
        }

        .operator-group-content {
            padding-left: 24px;
            margin-top: 10px;
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .operator-group-content.visible {
            display: block;
        }

        .operator-group-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 10px;
            transition: all 0.2s ease;
            border-radius: 8px;
        }

        .operator-group-item:hover {
            background: var(--hover-bg);
        }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 3px solid transparent;
            background: linear-gradient(white, white) padding-box,
                        var(--primary-gradient) border-box;
            border-image: var(--primary-gradient);
            border-image-slice: 0 0 1 0;
        }

        .panel-title {
            font-size: 24px;
            font-weight: 800;
            background: var(--primary-gradient);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin: 0;
            letter-spacing: -0.8px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 10px;
        }

        .control-label {
            font-weight: 700;
            font-size: 14px;
            margin-bottom: 6px;
            color: var(--dark-bg);
            letter-spacing: -0.3px;
            text-transform: uppercase;
            font-size: 11px;
            opacity: 0.8;
        }

        .hint-text {
            font-size: 12px;
            color: var(--text-muted);
            margin-top: -2px;
            font-style: italic;
        }

        .access-button {
            background: var(--primary-gradient);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 12px 18px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 700;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: var(--shadow-md);
            position: relative;
            overflow: hidden;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 12px;
        }

        .access-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            transition: left 0.6s;
        }

        .access-button:hover::before {
            left: 100%;
        }

        .access-button:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-lg), var(--shadow-glow);
        }

        .access-button:active {
            transform: translateY(0);
            box-shadow: var(--shadow-sm);
        }

        .secondary-button {
            background: white;
            color: var(--text-color);
            border: 2px solid var(--border-color);
            box-shadow: var(--shadow-sm);
        }

        .secondary-button:hover {
            background: var(--hover-bg);
            border-color: var(--primary-color);
        }

        .danger-button {
            background: var(--danger-gradient);
            color: white;
        }

        .danger-button:hover {
            box-shadow: var(--shadow-lg), 0 0 20px rgba(239, 68, 68, 0.4);
        }

        .success-button {
            background: var(--primary-gradient);
            color: white;
        }

        .success-button:hover {
            box-shadow: var(--shadow-lg), var(--shadow-glow);
        }

        .access-input, .access-textarea {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            font-size: 14px;
            box-sizing: border-box;
            white-space: normal;
            font-family: 'Inter', sans-serif;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            background: white;
            font-weight: 500;
        }

        .access-input:focus, .access-select:focus, .access-textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.1);
            background: #f0fdf4;
        }

        .access-checkbox {
            margin-right: 10px;
            width: 20px;
            height: 20px;
            cursor: pointer;
            accent-color: var(--primary-color);
        }

        .checkbox-container {
            display: flex;
            align-items: center;
            gap: 24px;
            margin-bottom: 8px;
        }

        /* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ iOS-style –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ */
        .settings-toggles {
            display: flex;
            flex-direction: column;
            gap: 14px;
            margin-bottom: 20px;
            padding: 16px;
            background: linear-gradient(135deg, #f9fafb 0%, #ffffff 100%);
            border-radius: 16px;
            border: 2px solid var(--border-color);
        }

        .toggle-switch {
            display: flex;
            align-items: center;
            gap: 14px;
            cursor: pointer;
            user-select: none;
            position: relative;
            padding: 4px 0;
        }

        .toggle-switch input[type="checkbox"] {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: relative;
            width: 52px;
            height: 28px;
            background: #d1d5db;
            border-radius: 34px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            flex-shrink: 0;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .toggle-slider::before {
            content: '';
            position: absolute;
            width: 22px;
            height: 22px;
            left: 3px;
            top: 3px;
            background: white;
            border-radius: 50%;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .toggle-switch:hover .toggle-slider {
            background: #9ca3af;
        }

        .toggle-switch input:checked + .toggle-slider {
            background: var(--primary-gradient);
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1), 0 0 12px rgba(16, 185, 129, 0.3);
        }

        .toggle-switch input:checked + .toggle-slider::before {
            transform: translateX(24px);
        }

        .toggle-switch:active .toggle-slider::before {
            width: 26px;
        }

        .toggle-text {
            font-weight: 600;
            font-size: 14px;
            color: var(--text-color);
            transition: color 0.2s ease;
        }

        .toggle-switch:hover .toggle-text {
            color: var(--primary-color);
        }

        .toggle-switch input:checked ~ .toggle-text {
            color: var(--primary-dark);
        }

        .field-block {
            border: 2px solid var(--border-color);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 16px;
            background: white;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: var(--shadow-sm);
        }

        .field-block:hover {
            border-color: var(--primary-color);
            box-shadow: var(--shadow-lg);
            transform: translateY(-4px);
        }

        .field-block-title {
            font-weight: 800;
            margin-bottom: 16px;
            font-size: 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: var(--dark-bg);
            letter-spacing: -0.5px;
        }

        .remove-field {
            color: #ef4444;
            cursor: pointer;
            font-size: 22px;
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.1) 100%);
            border: none;
            padding: 0;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .remove-field:hover {
            background: var(--danger-gradient);
            color: white;
            transform: rotate(90deg) scale(1.1);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
        }

        .projects-list {
            max-height: 340px;
            overflow-y: auto;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            padding: 14px;
            background: white;
            margin-top: 10px;
            box-shadow: inset var(--shadow-sm);
        }

        .projects-list::-webkit-scrollbar {
            width: 6px;
        }

        .projects-list::-webkit-scrollbar-thumb {
            background: var(--primary-gradient);
            border-radius: 10px;
        }

        .project-item {
            display: flex;
            align-items: center;
            padding: 10px 8px;
            border-bottom: 1px solid var(--border-color);
            transition: all 0.2s ease;
            border-radius: 8px;
        }

        .project-item:hover {
            background: #f0fdf4;
            border-color: var(--primary-color);
        }

        .project-item:last-child {
            border-bottom: none;
        }

        .project-name {
            margin-left: 12px;
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-weight: 600;
            font-size: 13px;
        }

        .list-actions {
            display: flex;
            gap: 8px;
        }

        .projects-actions-bar {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        .projects-action-btn {
            flex: 1;
            font-size: 13px;
            padding: 10px 14px;
            cursor: pointer;
            background: white;
            border: 2px solid var(--border-color);
            border-radius: 10px;
            font-weight: 700;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            color: var(--text-color);
            font-family: 'Inter', sans-serif;
            text-transform: uppercase;
            font-size: 11px;
            letter-spacing: 0.5px;
        }

        .projects-action-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .projects-action-btn:active {
            transform: translateY(0);
        }

        .select-all-btn {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(5, 150, 105, 0.1) 100%);
            border-color: var(--primary-color);
            color: var(--primary-dark);
        }

        .select-all-btn:hover {
            background: var(--primary-gradient);
            color: white;
            border-color: var(--primary-color);
            box-shadow: var(--shadow-md), var(--shadow-glow);
        }

        .unselect-all-btn {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.1) 100%);
            border-color: #ef4444;
            color: #dc2626;
        }

        .unselect-all-btn:hover {
            background: var(--danger-gradient);
            color: white;
            border-color: #ef4444;
            box-shadow: var(--shadow-md), 0 0 20px rgba(239, 68, 68, 0.4);
        }

        .list-action {
            font-size: 12px;
            padding: 4px 8px;
            cursor: pointer;
            color: var(--primary-color);
            background: rgba(16, 185, 129, 0.1);
            border: none;
            border-radius: 6px;
            font-weight: 600;
            transition: all 0.2s ease;
        }

        .list-action:hover {
            background: rgba(16, 185, 129, 0.2);
            transform: scale(1.05);
        }

        .button-container {
            display: flex;
            gap: 14px;
            margin-top: 14px;
        }

        .divider {
            height: 3px;
            background: var(--primary-gradient);
            margin: 20px 0;
            border-radius: 3px;
            opacity: 0.3;
        }

        .access-select {
            width: 100%;
            height: 48px;
            padding: 12px 16px;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            font-size: 14px;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            background: white;
            cursor: pointer;
        }

        .access-select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.1);
        }

        .progress-container {
            margin-top: 24px;
            display: none;
            animation: fadeIn 0.4s ease;
        }

        .progress-bar {
            height: 14px;
            background: #e5e7eb;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }

        .progress-fill {
            height: 100%;
            background: var(--primary-gradient);
            width: 0%;
            transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 20px;
            box-shadow: 0 0 15px rgba(16, 185, 129, 0.6);
            position: relative;
            overflow: hidden;
        }

        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.5), transparent);
            animation: shimmer 2s infinite;
        }

        .progress-text {
            margin-top: 10px;
            text-align: center;
            font-size: 13px;
            font-weight: 700;
            color: var(--text-color);
        }

        .access-toggle {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .field-actions {
            display: flex;
            gap: 8px;
        }

        .users-input-wrapper {
            display: flex;
            align-items: stretch;
            gap: 10px;
        }

        .users-input-wrapper .access-textarea {
            flex-grow: 1;
            margin: 0;
        }

        .find-operators-btn {
            flex-shrink: 0;
        }

        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–≤ */
        * {
            scrollbar-width: thin;
            scrollbar-color: var(--primary-color) #f3f4f6;
        }
    `);    function makeSafeId(str) {
        if (!str) return 'id-empty';
        try {
            const utf8 = encodeURIComponent(str);
            const binary = unescape(utf8);
            const b64 = btoa(binary);
            const b64url = b64.replace(/=+$/,'').replace(/\+/g,'-').replace(/\//g,'_');
            return `id-${b64url}`;
        } catch (e) {
            return `id-${str.replace(/[^a-zA-Z0-9]+/g, '-')}`;
        }
    }

    async function runWithConcurrency(tasks, limit) {
        const results = [];
        const executing = [];

        for (const task of tasks) {
            const p = Promise.resolve().then(() => task());
            results.push(p);

            if (limit <= 0) continue;

            const e = p.then(() => executing.splice(executing.indexOf(e), 1));
            executing.push(e);

            if (executing.length >= limit) {
                await Promise.race(executing);
            }
        }

        return Promise.all(results);
    }

    if (location.href.includes("settings.html")) {
        const panel = document.createElement('div');
        panel.className = 'access-panel';
        panel.innerHTML = `
            <div class="panel-header">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <h3 class="panel-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞</h3>
                    <button id="showSearchPanelBtn" class="access-button secondary-button" title="–ù–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤" style="padding: 5px 8px; font-size: 12px;">üîç</button>
                </div>
                <div style="display:flex; gap:8px; align-items:center;">
                    <button id="closeButton" class="access-button danger-button" style="padding: 5px 8px; font-size: 12px;">‚úï</button>
                </div>
            </div>

            <div class="settings-toggles">
                <label class="toggle-switch">
                    <input type="checkbox" id="legacyModeToggle">
                    <span class="toggle-slider"></span>
                    <span class="toggle-text">‚ö° –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º</span>
                </label>

                <label class="toggle-switch">
                    <input type="checkbox" id="columnRangeToggle">
                    <span class="toggle-slider"></span>
                    <span class="toggle-text">üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 15 –∫–æ–ª–æ–Ω–æ–∫</span>
                </label>

                <label class="toggle-switch">
                    <input type="checkbox" id="templatesPerSettingToggle">
                    <span class="toggle-slider"></span>
                    <span class="toggle-text">üéØ –†–µ–∂–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π</span>
                </label>
            </div>

            <div class="control-group" id="projectsControlGroup">
                <label class="control-label" id="projectsControlLabel">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—ã:</label>
                <button id="toggleButton" class="access-button secondary-button" style="width: 100%; margin-bottom: 8px;">
                    üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
                </button>
                <div class="projects-actions-bar">
                    <button id="selectAllButton" class="projects-action-btn select-all-btn">‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ</button>
                    <button id="unselectAllButton" class="projects-action-btn unselect-all-btn">‚úï –°–Ω—è—Ç—å –≤—Å–µ</button>
                </div>
                <div id="namesList" class="projects-list" style="display: none;"></div>
            </div>

            <div class="control-group" id="templateControlGroup">
                <label class="control-label" id="templateControlLabel">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω:</label>
                <select id="templateSelect" class="access-select">
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω</option>
                    <option value="template1">–®–∞–±–ª–æ–Ω –Ω–æ—á–Ω–∏–∫–æ–≤</option>
                    <option value="template2">–°—Ç–∞–∂—ë—Ä—ã DZ</option>
                </select>
            </div>

            <div class="control-group">
                <label class="control-label">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞:</label>
                <div id="fieldsContainer">
                    <div class="field-block mainBlock">
                        <div class="field-block-title">
                            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ #1
                        </div>
                        <div class="control-group">
                            <label class="control-label">–ö–æ–ª–æ–Ω–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):</label>
                            <input type="text" class="columnsInput access-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1 2 3">
                        </div>
                        <div class="control-group">
                            <label class="control-label">–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:</label>
                            <textarea rows="3" class="usersInput access-textarea" placeholder="–ü–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Å—Ç—Ä–æ–∫—É"></textarea>
                        </div>
                        <div class="control-group">
                            <label class="control-label">–î–µ–π—Å—Ç–≤–∏–µ:</label>
                            <select class="actionSelect access-select">
                                <option value="1">–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                                <option value="0">–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                            </select>
                        </div>
                        <div class="control-group projects-or-category">
                            <label class="control-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è (—à–∞–±–ª–æ–Ω):</label>
                            <select class="categorySelect access-select"></select>
                        </div>
                    </div>
                </div>
                <button id="addFieldButton" class="access-button secondary-button">+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫</button>
            </div>

            <div class="progress-container" id="progressContainer">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div class="progress-text" id="progressText">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 / 0</div>
            </div>

            <div class="divider"></div>

            <div class="button-container">
                <button id="confirmButton" class="access-button success-button" style="flex-grow: 1;">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
            </div>
        `;
        document.body.appendChild(panel);

        const searchPanel = document.createElement('div');
        searchPanel.id = 'operatorSearchPanel';
        searchPanel.className = 'operator-search-panel';
        searchPanel.innerHTML = `
            <div class="panel-header">
                <h3 class="panel-title">–ü–æ–∏—Å–∫</h3>
            </div>

                <div style="display:flex; gap:10px; align-items:center; justify-content:flex-start;">
                    <label style="display:flex; align-items:center; gap:8px; font-weight:600;">
                        <input type="checkbox" id="categorySearchToggle" class="access-checkbox">
                        –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    </label>
                </div>

            <div class="search-controls-wrapper" style="display: flex; gap: 15px; align-items: stretch;">
                <div class="search-section" style="flex: 1; display: flex; flex-direction: column;">
                    <label class="control-label" style="font-weight: bold; font-size: 15px; margin-bottom: 8px; display: block;">–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</label>
                    <div class="control-group" style="flex-grow: 1;">
                        <textarea id="operatorAccessSearchTextarea" rows="3" class="access-textarea" placeholder="–õ–æ–≥–∏–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É"></textarea>
                    </div>
                    <button id="runOperatorAccessSearchBtn" class="access-button success-button" style="width: 100%; margin-top: 5px;">–ù–∞–π—Ç–∏</button>
                </div>

                <div class="search-section" style="flex: 1; display: flex; flex-direction: column;">
                    <label class="control-label" style="font-weight: bold; font-size: 15px; margin-bottom: 8px; display: block;">–°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫</label>
                    <div class="control-group" style="flex-grow: 1;">
                        <input type="text" id="searchColumnsInput" class="access-input" placeholder="–ù–æ–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫">
                        <span class="hint-text">–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏</span>
                    </div>
                    <button id="runOperatorSearchBtn" class="access-button success-button" style="width: 100%; margin-top: 5px;">–ù–∞–π—Ç–∏</button>
                </div>
            </div>

            <div class="divider" style="margin: 20px 0;"></div>

            <div class="results-area">
                <div id="operatorAccessResultsContainer" class="search-results-container" style="display: none;"></div>
                <div id="columnSearchResultsContainer" class="search-results-container" style="display: none;"></div>
                <div id="applySearchContainer" class="button-container" style="flex-direction: column; gap: 5px; display: none; margin-top: 10px;"></div>
            </div>
        `;
        document.body.appendChild(searchPanel);

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞
        (function setupClipboardTool(){
            const pasteModal = document.createElement('div');
            pasteModal.id = 'pasteModal';
            pasteModal.style.position = 'fixed';
            pasteModal.style.left = '50%';
            pasteModal.style.top = '50%';
            pasteModal.style.transform = 'translate(-50%,-50%)';
            pasteModal.style.background = '#fff';
            pasteModal.style.border = '1px solid #ccc';
            pasteModal.style.padding = '12px';
            pasteModal.style.zIndex = '10001';
            pasteModal.style.display = 'none';
            pasteModal.style.width = '640px';
            pasteModal.innerHTML = `
                <div style="font-weight:700; margin-bottom:8px;">–í—Å—Ç–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω (–ø—Ä–∏–º–µ—Ä –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)</div>
                <textarea id="pasteTemplateTextarea" rows="14" style="width:100%; box-sizing:border-box;"></textarea>
                <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:8px;">
                    <button id="applyPasteBtn" class="access-button success-button">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                    <button id="cancelPasteBtn" class="access-button secondary-button">–û—Ç–º–µ–Ω–∞</button>
                </div>`;
            document.body.appendChild(pasteModal);

            function showPasteModal(){ pasteModal.style.display = 'block'; document.getElementById('pasteTemplateTextarea').focus(); }
            function hidePasteModal(){ pasteModal.style.display = 'none'; }

            document.getElementById('cancelPasteBtn').addEventListener('click', hidePasteModal);
            document.getElementById('applyPasteBtn').addEventListener('click', () => {
                const text = document.getElementById('pasteTemplateTextarea').value || '';
                try { const parsed = parseTemplateText(text); applyParsedTemplate(parsed); hidePasteModal(); }
                catch (err) { alert('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞: ' + (err && err.message ? err.message : err)); }
            });

            setTimeout(() => {
                const showBtn = document.getElementById('showSearchPanelBtn');
                if (showBtn && showBtn.parentElement) {
                    const clipBtn = document.createElement('button');
                    clipBtn.id = 'pasteFromClipboardBtn';
                    clipBtn.className = 'access-button secondary-button';
                    clipBtn.style.padding = '5px 8px';
                    clipBtn.style.fontSize = '12px';
                    clipBtn.title = '–í—Å—Ç–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω';
                    clipBtn.textContent = 'üìã';
                    showBtn.parentElement.insertBefore(clipBtn, showBtn.nextSibling);
                    clipBtn.addEventListener('click', showPasteModal);
                }
            }, 50);
        })();

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
        function updateGlobalProjectControlsVisibility() {
            const perSetting = document.getElementById('templatesPerSettingToggle')?.checked;
            const labels = panel.querySelectorAll('.control-group label.control-label');
            labels.forEach(l => {
                const txt = l.textContent ? l.textContent.trim() : '';
                if (txt.startsWith('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—ã')) {
                    l.style.display = perSetting ? 'none' : '';
                }
                if (txt.startsWith('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω')) {
                    l.style.display = perSetting ? 'none' : '';
                }
            });
            const templateSelectEl = document.getElementById('templateSelect');
            if (templateSelectEl) templateSelectEl.style.display = perSetting ? 'none' : '';
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è templatesPerSettingToggle –∏–∑ localStorage
        const savedTemplatesPerSetting = localStorage.getItem('proZvon_templatesPerSetting');
        if (savedTemplatesPerSetting !== null) {
            const saved = savedTemplatesPerSetting === '1';
            const tgl = document.getElementById('templatesPerSettingToggle');
            if (tgl) tgl.checked = saved;
        }
        updateGlobalProjectControlsVisibility();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è templatesPerSettingToggle
        const tmplToggle = document.getElementById('templatesPerSettingToggle');
        if (tmplToggle) {
            tmplToggle.addEventListener('change', () => {
                localStorage.setItem('proZvon_templatesPerSetting', tmplToggle.checked ? '1' : '0');
                updateProjectsOrCategoryUI();
                updateGlobalProjectControlsVisibility();
            });
        }

        const confirmButton = document.getElementById('confirmButton');

        const settings = GM_getValue(swap);
        if (!settings || !settings.encryptedKey || !settings.secret) {
            confirmButton.disabled = true;
            confirmButton.textContent = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã';
        }

        document.getElementById('closeButton').addEventListener('click', () => {
            panel.remove();
            searchPanel.remove();
            if (observer) observer.disconnect();
        });

        const rows = document.querySelectorAll("tr");
        const namesMap = new Map();
        const namesList = document.getElementById('namesList');
        const toggleButton = document.getElementById('toggleButton');
        const selectAllButton = document.getElementById('selectAllButton');
        const unselectAllButton = document.getElementById('unselectAllButton');

        let projectCount = 0;
        rows.forEach(row => {
            const nameElement = row.querySelector('td:nth-child(2) a');
            const configLinkElement = row.querySelector('td:nth-child(1) a');
            const cells = Array.from(row.querySelectorAll('td:nth-child(n+3)'));
            const values = cells.map(cell => parseFloat(cell.textContent.trim()) || 0);
            const hasNonZeroValue = values.some(value => value > 0);

            if (nameElement && configLinkElement) {
                projectCount++;
                const name = nameElement.textContent.trim();
                const configLink = configLinkElement.href;

                const projectName = name.toLowerCase().replace(/\s+/g, '-');
                const subdomain = projectName;

                // project info logging removed for performance
                namesMap.set(name, { configLink, subdomain });

                const container = document.createElement('div');
                container.className = 'project-item';

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'access-checkbox';
                checkbox.value = subdomain;
                checkbox.dataset.configLink = configLink;
                checkbox.dataset.projectName = name;
                checkbox.id = `checkbox-${name.replace(/\s+/g, '-')}`;
                checkbox.checked = hasNonZeroValue;

                const label = document.createElement('label');
                label.className = 'project-name';
                label.htmlFor = `checkbox-${name.replace(/\s+/g, '-')}`;
                label.textContent = name;
                label.title = name;

                container.appendChild(checkbox);
                container.appendChild(label);
                namesList.appendChild(container);
            }
        });

    fillCategorySelects();
    updateProjectsOrCategoryUI();

        loadProjectCategories().then(categories => {
            projectCategories = categories;
            if (categories.size > 0) {
                populateTemplateSelect();
                fillCategorySelects();
                updateProjectsOrCategoryUI();
            }
        });

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        function populateTemplateSelect() {
            const templateSelect = document.getElementById('templateSelect');

            const existingCategories = templateSelect.querySelectorAll('option[value^="category_"]');
            existingCategories.forEach(option => option.remove());

            projectCategories.forEach((projects, category) => {
                const option = document.createElement('option');
                option.value = `category_${category}`;
                option.textContent = category;
                templateSelect.appendChild(option);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        toggleButton.addEventListener('click', () => {
            const isVisible = namesList.style.display !== 'none';
            namesList.style.display = isVisible ? 'none' : 'block';
            toggleButton.innerHTML = isVisible ? 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã' : 'üìÇ –°–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç—ã';
        });

        selectAllButton.addEventListener('click', () => {
            document.querySelectorAll('#namesList input[type="checkbox"]').forEach(cb => cb.checked = true);
        });

        unselectAllButton.addEventListener('click', () => {
            document.querySelectorAll('#namesList input[type="checkbox"]').forEach(cb => cb.checked = false);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        let fieldCounter = 1;
        document.getElementById('addFieldButton').addEventListener('click', () => {
            fieldCounter++;
            const fieldBlock = document.createElement('div');
            fieldBlock.className = 'field-block additionalBlock';
            fieldBlock.innerHTML = `
                <div class="field-block-title">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ #${fieldCounter}
                    <div class="field-actions">
                        <button class="remove-field">√ó</button>
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label">–ö–æ–ª–æ–Ω–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):</label>
                    <input type="text" class="columnsInput access-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1 2 3">
                </div>
                <div class="control-group">
                    <label class="control-label">–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:</label>
                    <textarea rows="3" class="usersInput access-textarea" placeholder="–ü–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Å—Ç—Ä–æ–∫—É"></textarea>
                </div>
                <div class="control-group">
                    <label class="control-label">–î–µ–π—Å—Ç–≤–∏–µ:</label>
                    <select class="actionSelect access-select">
                        <option value="1">–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                        <option value="0">–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                    </select>
                </div>
                <div class="control-group projects-or-category">
                    <label class="control-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è (—à–∞–±–ª–æ–Ω):</label>
                    <select class="categorySelect access-select"></select>
                </div>
            `;

                // –î–æ–±–∞–≤–ª—è–µ–º select –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –Ω–æ–≤—ã–π –±–ª–æ–∫ (–∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–ª–µ–µ)
                document.getElementById('fieldsContainer').appendChild(fieldBlock);
                fillCategorySelects();
                updateProjectsOrCategoryUI();
                updateGlobalProjectControlsVisibility();

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—è
            fieldBlock.querySelector('.remove-field').addEventListener('click', () => {
                fieldBlock.remove();
                reorderFieldBlocks();
                // (projectsSelect removed) –æ–±–Ω–æ–≤–ª—è–µ–º category selects
                fillCategorySelects();
            });
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        function reorderFieldBlocks() {
            const blocks = document.querySelectorAll('.field-block');
            blocks.forEach((block, index) => {
                const titleEl = block.querySelector('.field-block-title');
                if (titleEl) {
                    titleEl.childNodes[0].nodeValue = `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ #${index + 1}`;
                }
            });
            fieldCounter = blocks.length;
        }



        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ .categorySelect –æ–ø—Ü–∏—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ projectCategories
        function fillCategorySelects() {
            const categories = Array.from(projectCategories.keys());
            document.querySelectorAll('.categorySelect').forEach(sel => {
                const current = sel.value;
                sel.innerHTML = '';
                const emptyOpt = document.createElement('option');
                emptyOpt.value = '';
                emptyOpt.textContent = '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)';
                sel.appendChild(emptyOpt);
                categories.forEach(cat => {
                    const o = document.createElement('option');
                    o.value = cat;
                    o.textContent = cat;
                    if (cat === current) o.selected = true;
                    sel.appendChild(o);
                });
            });
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ projectsSelect / categorySelect –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å toggle
        function updateProjectsOrCategoryUI() {
            const perSetting = document.getElementById('templatesPerSettingToggle')?.checked;
            document.querySelectorAll('.projects-or-category').forEach(block => {
                // –ø–æ–∫–∞–∂–µ–º –∏–ª–∏ —Å–ø—Ä—è—á–µ–º –≤–µ—Å—å control-group —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                block.style.display = perSetting ? '' : 'none';
            });
            // –°–∫—Ä—ã–≤–∞—Ç—å/–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            const namesListEl = document.getElementById('namesList');
            const toggleButtonEl = document.getElementById('toggleButton');
            const selectAllBtn = document.getElementById('selectAllButton');
            const unselectAllBtn = document.getElementById('unselectAllButton');
            if (namesListEl) {
                if (perSetting) {
                    namesListEl.style.display = 'none';
                    if (toggleButtonEl) toggleButtonEl.style.display = 'none';
                    if (selectAllBtn) selectAllBtn.style.display = 'none';
                    if (unselectAllBtn) unselectAllBtn.style.display = 'none';
                } else {
                    if (toggleButtonEl) toggleButtonEl.style.display = 'inline-block';
                    if (selectAllBtn) selectAllBtn.style.display = 'inline-block';
                    if (unselectAllBtn) unselectAllBtn.style.display = 'inline-block';
                    // namesList visibility controlled elsewhere (toggle button)
                }
            }

            const projectsControlGroup = document.getElementById('projectsControlGroup');
            const templateControlGroup = document.getElementById('templateControlGroup');
            if (projectsControlGroup) projectsControlGroup.style.display = perSetting ? 'none' : '';
            if (templateControlGroup) templateControlGroup.style.display = perSetting ? 'none' : '';
        }

        // —Å–ª—É—à–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏
        document.addEventListener('change', (e) => {
            if (e.target && e.target.id === 'templatesPerSettingToggle') {
                updateProjectsOrCategoryUI();
            }
        });

        // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–û–ò–°–ö–ê –î–û–°–¢–£–ü–û–í –û–ü–ï–†–ê–¢–û–†–û–í ---

    function parseTemplateText(text) {
            if (!text || !text.trim()) return [];
            const lines = text.split(/\r?\n/).map(l => l.trim());
            const result = [];
            let currentCategory = null;
            let currentColorGroup = null; // –ó–µ–ª–µ–Ω—ã—Ö, –ñ–µ–ª—Ç—ã—Ö, –ö—Ä–∞—Å–Ω—ã—Ö
            let currentColumns = [];
            let currentUsers = [];

            function pushBlock() {
                if (currentCategory && currentUsers.length > 0) {
                    let cat = result.find(r => r.category === currentCategory);
                    if (!cat) {
                        cat = { category: currentCategory, blocks: [] };
                        result.push(cat);
                    }
                    cat.blocks.push({
                        columns: currentColumns.slice(),
                        users: currentUsers.slice(),
                        colorGroup: currentColorGroup
                    });
                    currentColumns = [];
                    currentUsers = [];
                    currentColorGroup = null;
                }
            }

            for (let i = 0; i < lines.length; i++) {
                const ln = lines[i];

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if (!ln) continue;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø–æ–π
                const colorMatch = ln.match(/^(–ó–µ–ª–µ–Ω—ã—Ö|–ñ–µ–ª—Ç—ã—Ö|–ö—Ä–∞—Å–Ω—ã—Ö|–ó–µ–ª–µ–Ω—ã–µ|–ñ–µ–ª—Ç—ã–µ|–ö—Ä–∞—Å–Ω—ã–µ)$/i);
                if (colorMatch) {
                    pushBlock();
                    currentColorGroup = colorMatch[1];
                    currentColumns = [];
                    currentUsers = [];
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∏–Ω–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
                if (/^[A-Za-z0-9_\-–∞–ê–µ–ï]+$/.test(ln) && !/^\d+$/.test(ln)) {
                    if (!currentCategory) {
                        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        pushBlock();
                        currentCategory = ln;
                        currentColorGroup = null;
                        currentColumns = [];
                        currentUsers = [];
                    } else {
                        // –≠—Ç–æ –ª–æ–≥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                        currentUsers.push(ln);
                    }
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ–ª–æ–Ω–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
                const maybeCols = ln.split(/\s+/).map(x => x.trim()).filter(x => x !== '').map(x => Number(x)).filter(n => !Number.isNaN(n));
                if (maybeCols.length > 0 && /^[\d\s]+$/.test(ln)) {
                    if (!currentCategory) {
                        throw new Error('–ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
                    }
                    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ª–æ–≥–∏–Ω—ã, –∑–Ω–∞—á–∏—Ç –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –±–ª–æ–∫—É
                    if (currentUsers.length > 0) {
                        pushBlock();
                    }
                    currentColumns = maybeCols;
                    continue;
                }

                // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –Ω–µ —Ü–≤–µ—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                if (/[–∞-—è–ê-–Ø—ë–Å]/.test(ln) && !colorMatch) {
                    pushBlock();
                    currentCategory = ln;
                    currentColorGroup = null;
                    currentColumns = [];
                    currentUsers = [];
                    continue;
                }
            }

            // –ü—É—à–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
            pushBlock();

            return result;
        }

    function applyParsedTemplate(parsed) {
            if (!Array.isArray(parsed) || parsed.length === 0) return;
            const fieldsContainer = document.getElementById('fieldsContainer');
            const existingBlocks = Array.from(document.querySelectorAll('.field-block'));
            let blockIndex = 0;

            parsed.forEach(catEntry => {
                const category = catEntry.category;
                catEntry.blocks.forEach(blockSpec => {
                    let targetBlock = existingBlocks[blockIndex];
                    if (!targetBlock) {
                        document.getElementById('addFieldButton').click();
                        const allBlocks = Array.from(document.querySelectorAll('.field-block'));
                        targetBlock = allBlocks[allBlocks.length - 1];
                        existingBlocks.push(targetBlock);
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–≤–µ—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø–µ
                    const blockTitle = targetBlock.querySelector('.field-block-title');
                    if (blockTitle && blockSpec.colorGroup) {
                        blockTitle.textContent = `${category} - ${blockSpec.colorGroup}`;
                    }

                    const catSel = targetBlock.querySelector('.categorySelect');
                    if (catSel) {
                        if (!Array.from(catSel.options).some(o=>o.value === category)) {
                            const op = document.createElement('option'); op.value = category; op.textContent = category; catSel.appendChild(op);
                        }
                        catSel.value = category;
                    }

                    const columnsInput = targetBlock.querySelector('.columnsInput');
                    if (columnsInput) {
                        if (blockSpec.columns && blockSpec.columns.length) {
                            columnsInput.value = blockSpec.columns.join(' ');
                        } else {
                            columnsInput.value = '';
                        }
                    }

                    const usersTa = targetBlock.querySelector('.usersInput');
                    if (usersTa) {
                        if (blockSpec.users && blockSpec.users.length) {
                            usersTa.value = blockSpec.users.join('\n');
                        } else {
                            usersTa.value = '';
                        }
                    }

                    blockIndex++;
                });
            });
        }

    // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        async function fetchProjectRules(project) {
            const key = project.configLink || project.subdomain || project.name;
            if (rulesCache.has(key)) {
                return rulesCache.get(key);
            }
            const use15Columns = document.getElementById('columnRangeToggle').checked;
            const columnMap = use15Columns ? columnMap15 : columnMap9;

            return new Promise((resolve) => {
                GM_xmlhttpRequest({
                    method: 'GET',
                    url: project.configLink,
                    onload: (response) => {
                        if (response.status === 200) {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(response.responseText, 'text/html');
                            const operatorAccess = new Map();

                            const rows = doc.querySelectorAll("tr");
                            rows.forEach(row => {
                                const usernameElement = row.querySelector("td:first-child");
                                const username = usernameElement?.textContent?.trim();

                                if (username && username !== '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
                                    const accessibleColumns = new Set();
                                    for (const [col, { group, type }] of Object.entries(columnMap)) {
                                        const checkbox = row.querySelector(`td[data-group="${group}"][data-type="${type}"] input[type="checkbox"]`);
                                        if (checkbox && checkbox.checked) {
                                            accessibleColumns.add(Number(col));
                                        }
                                    }
                                    operatorAccess.set(username.toLowerCase(), accessibleColumns);
                                }
                            });
                            resolve({ project, access: operatorAccess, error: null });
                            // –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∞—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
                            try { rulesCache.set(key, { project, access: operatorAccess, error: null }); } catch(e){}
                        } else {
                            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª –¥–ª—è ${project.name}:`, response.statusText);
                            const res = { project, access: new Map(), error: response.statusText };
                            try { rulesCache.set(key, res); } catch(e) {}
                            resolve(res);
                        }
                    },
                    onerror: (err) => {
                        console.error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è ${project.name}:`, err);
                        const res = { project, access: new Map(), error: err };
                        try { rulesCache.set(key, res); } catch(e) {}
                        resolve(res);
                    }
                });
            });
        }


        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
        const templateSelect = document.getElementById('templateSelect');
        templateSelect.addEventListener('change', (event) => {
            const selectedTemplate = event.target.value;

            const fieldsContainer = document.getElementById('fieldsContainer');
            fieldsContainer.innerHTML = '';
            fieldCounter = 0;

            if (selectedTemplate.startsWith("category_")) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const categoryName = selectedTemplate.replace("category_", "");
                const categoryProjects = projectCategories.get(categoryName) || [];

                // –°–Ω–∏–º–∞–µ–º –≥–∞–ª–æ—á–∫–∏ —Å–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                const checkboxes = document.querySelectorAll('#namesList input[type="checkbox"]');
                checkboxes.forEach(checkbox => checkbox.checked = false);

                // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                checkboxes.forEach(checkbox => {
                    const projectName = checkbox.nextElementSibling.textContent.trim().toLowerCase();
                    const subdomain = checkbox.value.toLowerCase();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å—É–±–¥–æ–º–µ–Ω–∞
                    if (categoryProjects.some(project => {
                        const projectLower = project.toLowerCase().trim();
                        return projectName === projectLower || subdomain === projectLower;
                    })) {
                        checkbox.checked = true;
                    }
                });

                // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                fieldCounter++;
                const fieldBlock = document.createElement('div');
                fieldBlock.className = 'field-block additionalBlock';
                fieldBlock.innerHTML = `
                    <div class="field-block-title">
                        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryName}
                    </div>
                    <div class="control-group">
                        <label class="control-label">–ö–æ–ª–æ–Ω–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):</label>
                        <input type="text" class="columnsInput access-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1 2 3">
                        <span class="hint-text">–í–≤–µ–¥–∏—Ç–µ "all" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫</span>
                    </div>
                    <div class="control-group">
                        <label class="control-label">–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:</label>
                        <textarea rows="3" class="usersInput access-textarea" placeholder="–ü–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Å—Ç—Ä–æ–∫—É"></textarea>
                        <span class="hint-text">–í–≤–µ–¥–∏—Ç–µ "all" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</span>
                    </div>
                    <div class="control-group">
                        <label class="control-label">–î–µ–π—Å—Ç–≤–∏–µ:</label>
                        <select class="actionSelect access-select">
                            <option value="1">–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                            <option value="0">–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                        </select>
                    </div>
                    <div class="control-group">
                        <label class="control-label">–ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è —ç—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
                        <!-- projectsSelect removed: –∏—Å–ø–æ–ª—å–∑—É–µ–º categorySelect -->
                    </div>
                `;
                fieldsContainer.appendChild(fieldBlock);
                fillCategorySelects();
                return;
            }

            if (selectedTemplate === "template1") {
                // –®–∞–±–ª–æ–Ω –Ω–æ—á–Ω–∏–∫–æ–≤
                const templates = [
                    "1 2 3 9",
                    "3 4 9",
                    "4 9",
                    "5 6 7 9",
                    "7 8 9"
                ];

                fillCategorySelects();
                fillCategorySelects();
                templates.forEach((template, index) => {
                    fieldCounter++;
                    const fieldBlock = document.createElement('div');
                    fieldBlock.className = 'field-block additionalBlock';
                    fieldBlock.innerHTML = `
                        <div class="field-block-title">
                            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ #${fieldCounter}
                            ${index > 0 ? `
                            <div class="field-actions">
                                <button class="remove-field">√ó</button>
                            </div>` : ''}
                        </div>
                        <div class="control-group">
                            <label class="control-label">–ö–æ–ª–æ–Ω–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):</label>
                            <input type="text" class="columnsInput access-input" value="${template}">
                            <span class="hint-text">–í–≤–µ–¥–∏—Ç–µ "all" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫</span>
                        </div>
                        <div class="control-group">
                            <label class="control-label">–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:</label>
                            <textarea rows="3" class="usersInput access-textarea" placeholder="–ü–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Å—Ç—Ä–æ–∫—É"></textarea>
                            <span class="hint-text">–í–≤–µ–¥–∏—Ç–µ "all" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</span>
                        </div>
                        <div class="control-group">
                            <label class="control-label">–î–µ–π—Å—Ç–≤–∏–µ:</label>
                            <select class="actionSelect access-select">
                                <option value="1">–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                                <option value="0">–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                            </select>
                        </div>
                    `;
                    fieldsContainer.appendChild(fieldBlock);

                    //  –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
                    if (index > 0) {
                        fieldBlock.querySelector('.remove-field').addEventListener('click', () => {
                            fieldBlock.remove();
                            reorderFieldBlocks();
                            fillCategorySelects();
                        });
                    }
                });
            }
            else if (selectedTemplate === "template2") {
                // –®–∞–±–ª–æ–Ω —Å—Ç–∞–∂–µ—Ä–æ–≤ DZ
                fieldCounter++;
                const columns = "7 8 9";
                const targetProjects = [
                    "rino",
                    "cardiofort-dz",
                    "arthrofix-dz",
                    "valeocard-dz"
                ];

                const fieldBlock = document.createElement('div');
                fieldBlock.className = 'field-block additionalBlock';
                fieldBlock.innerHTML = `
                    <div class="field-block-title">
                        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ #${fieldCounter}
                    </div>
                    <div class="control-group">
                        <label class="control-label">–ö–æ–ª–æ–Ω–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):</label>
                        <input type="text" class="columnsInput access-input" value="${columns}">
                        <span class="hint-text">–í–≤–µ–¥–∏—Ç–µ "all" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫</span>
                    </div>
                    <div class="control-group">
                        <label class="control-label">–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:</label>
                        <textarea rows="3" class="usersInput access-textarea" placeholder="–ü–æ –æ–¥–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Å—Ç—Ä–æ–∫—É"></textarea>
                        <span class="hint-text">–í–≤–µ–¥–∏—Ç–µ "all" –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</span>
                    </div>
                    <div class="control-group">
                        <label class="control-label">–î–µ–π—Å—Ç–≤–∏–µ:</label>
                        <select class="actionSelect access-select">
                            <option value="1">–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                            <option value="0">–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</option>
                        </select>
                    </div>
                    <div class="control-group">
                        <label class="control-label">–ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è —ç—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
                            <!-- projectsSelect removed: –∏—Å–ø–æ–ª—å–∑—É–µ–º categorySelect -->
                    </div>
                `;
                fieldsContainer.appendChild(fieldBlock);
                fillCategorySelects();

                // –°–Ω–∏–º–∞–µ–º –≥–∞–ª–æ—á–∫–∏ —Å–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                const checkboxes = document.querySelectorAll('#namesList input[type="checkbox"]');
                checkboxes.forEach(checkbox => checkbox.checked = false);

                checkboxes.forEach(checkbox => {
                    const projectName = checkbox.nextElementSibling.textContent.trim().toLowerCase();
                    const subdomain = checkbox.value.toLowerCase();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                    if (targetProjects.some(target => {
                        const targetLower = target.toLowerCase().trim();
                        return projectName === targetLower || subdomain === targetLower;
                    })) {
                        checkbox.checked = true;
                    }
                });
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
        document.getElementById('closeButton').addEventListener('click', () => {
            panel.remove();
            searchPanel.remove();
        });

        async function findOperatorsWithAccess(projects, columns) {
            let hasErrors = false;

            const results = await runWithConcurrency(projects.map(p => () => fetchProjectRules(p)), CONCURRENT_LIMIT);

            results.forEach(result => {
                if (result.error) hasErrors = true;
            });

            if (hasErrors) {
                alert('–ü—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.');
            }

            const mergedOperatorAccess = new Map();
            results.forEach(({ access }) => {
                access.forEach((accessibleColumns, operator) => {
                    const operatorLower = operator.toLowerCase();
                    if (!mergedOperatorAccess.has(operatorLower)) {
                        mergedOperatorAccess.set(operatorLower, { name: operator, columns: new Set() });
                    }
                    accessibleColumns.forEach(col => mergedOperatorAccess.get(operatorLower).columns.add(col));
                });
            });

            if (columns.length > 0) {
                const filteredOperators = [];
                mergedOperatorAccess.forEach(({ name, columns: accessibleColumns }) => {
                    if (columns.every(c => accessibleColumns.has(c))) {
                        filteredOperators.push(name);
                    }
                });
                return { type: 'flat', data: filteredOperators.sort() };
            }

            const groupedOperators = new Map();
            mergedOperatorAccess.forEach(({ name, columns: accessibleColumns }) => {
                if (accessibleColumns.size > 0) {
                    const sortedColumns = [...accessibleColumns].sort((a, b) => a - b);
                    const key = sortedColumns.join(', ');
                    if (!groupedOperators.has(key)) {
                        groupedOperators.set(key, []);
                    }
                    groupedOperators.get(key).push(name);
                }
            });

            groupedOperators.forEach(operators => operators.sort());

            return { type: 'grouped', data: groupedOperators };
        }

    // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏)
    async function fetchRulesForProjects(projects) {
            // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            const unique = [];
            const seen = new Set();
            projects.forEach(p => {
                const key = p.configLink || p.subdomain || (p.name || '').toLowerCase();
                if (!seen.has(key)) {
                    seen.add(key);
                    unique.push(p);
                }
            });

            // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –∫–µ—à–µ
            const toFetch = [];
            unique.forEach(p => {
                const key = p.configLink || p.subdomain || (p.name || '').toLowerCase();
                if (!rulesCache.has(key)) toFetch.push(p);
            });

            if (toFetch.length > 0) {
                await runWithConcurrency(toFetch.map(p => () => fetchProjectRules(p)), CONCURRENT_LIMIT);
            }

            // –°–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–µ—à–∞
            const results = unique.map(p => {
                const key = p.configLink || p.subdomain || (p.name || '').toLowerCase();
                return rulesCache.get(key) || { project: p, access: new Map(), error: 'no-data' };
            });
            return results;
        }

        const showSearchPanelBtn = document.getElementById('showSearchPanelBtn');
        const runOperatorSearchBtn = document.getElementById('runOperatorSearchBtn');

        const toggleSearchPanel = (visible) => {
            searchPanel.classList.toggle('visible', visible);
        };

        const observer = new ResizeObserver(entries => {
            for (let entry of entries) {
                searchPanel.style.height = `${entry.contentRect.height}px`;
            }
        });

        observer.observe(panel);

        showSearchPanelBtn.addEventListener('click', () => {
            const isVisible = searchPanel.classList.contains('visible');
            toggleSearchPanel(!isVisible);
        });

        runOperatorSearchBtn.addEventListener('click', async () => {
            try { rulesCache && rulesCache.clear && rulesCache.clear(); } catch (e) { }
            const columnsInput = document.getElementById('searchColumnsInput').value.trim();
            const columns = columnsInput ? columnsInput.split(' ').map(Number).filter(n => n > 0) : [];

            const selectedProjects = Array.from(document.querySelectorAll('#namesList input[type="checkbox"]:checked'))
                .map(cb => ({
                    name: cb.dataset.projectName,
                    configLink: cb.dataset.configLink
                }));

            if (selectedProjects.length === 0) {
                alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.');
                return;
            }

            const columnSearchResultsContainer = document.getElementById('columnSearchResultsContainer');
            const operatorAccessResultsContainer = document.getElementById('operatorAccessResultsContainer');
            const applySearchContainer = document.getElementById('applySearchContainer');

            runOperatorSearchBtn.disabled = true;
            runOperatorSearchBtn.textContent = '–ü–æ–∏—Å–∫...';
            columnSearchResultsContainer.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            columnSearchResultsContainer.style.display = 'block';
            operatorAccessResultsContainer.style.display = 'none'; // —Å–∫—Ä—ã—Ç–∏–µ –¥—Ä—É–≥–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            operatorAccessResultsContainer.innerHTML = '';
            applySearchContainer.style.display = 'none';


            try {
                const categorySearch = document.getElementById('categorySearchToggle').checked;

                if (categorySearch) {
                    // –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É—è projectCategories
                    const results = await findOperatorsWithAccessByCategory(selectedProjects, columns);
                    renderCategorySearchResults(results);
                } else {
                    const results = await findOperatorsWithAccess(selectedProjects, columns);
                    renderSearchResults(results);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error);
                columnSearchResultsContainer.innerHTML = '<p style="color: var(--danger-color);">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.</p>';
            } finally {
                runOperatorSearchBtn.disabled = false;
                runOperatorSearchBtn.textContent = '–ù–∞–π—Ç–∏';
            }
        });

        // --- –ü–û–ò–°–ö –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ---
        // –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ—Ñ—Ñ–µ—Ä–æ–≤
        async function findOperatorsWithAccessByCategory(selectedProjects, columns) {
            // projectCategories: Map<category, [projectNames]>
            const use15Columns = document.getElementById('columnRangeToggle').checked;
            const columnMap = use15Columns ? columnMap15 : columnMap9;

            // –°–æ–ø–æ—Å—Ç–∞–≤–∏–º subdomain -> project name –∏–∑ selectedProjects
            const selectedBySubdomain = new Map();
            selectedProjects.forEach(p => selectedBySubdomain.set(p.subdomain || p.name.toLowerCase().replace(/\s+/g,'-'), p));

            // –ê–≥—Ä–µ–≥–∞—Ü–∏—è: —Å–æ–±–µ—Ä—ë–º –ø—Ä–æ–µ–∫—Ç—ã, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            const categoryResults = new Map();
            const categoryToMatched = new Map();
            const allMatchedProjects = [];

            for (const [category, projects] of projectCategories.entries()) {
                const matchedProjects = [];
                for (const projNameFragment of projects) {
                    for (const [subdomain, proj] of selectedBySubdomain.entries()) {
                        const pname = (proj.name || '').toLowerCase().trim();
                        const subdomainLower = subdomain.toLowerCase().trim();
                        const projFragmentLower = projNameFragment.toLowerCase().trim();

                        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Å—É–±–¥–æ–º–µ–Ω–∞
                        if (pname === projFragmentLower || subdomainLower === projFragmentLower) {
                            // –∏–∑–±–µ–≥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                            if (!matchedProjects.some(mp => (mp.configLink || mp.name) === (proj.configLink || proj.name))) matchedProjects.push(proj);
                        }
                    }
                }
                if (matchedProjects.length) {
                    categoryToMatched.set(category, matchedProjects);
                    matchedProjects.forEach(mp => allMatchedProjects.push(mp));
                }
            }

            if (allMatchedProjects.length === 0) return categoryResults;

            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ‚Äî –∑–∞–≥—Ä—É–∑–∏–º –∏—Ö –ø—Ä–∞–≤–∏–ª–∞ –µ–¥–∏–Ω–æ–∂–¥—ã
            const uniqueProjects = [];
            const seen = new Set();
            allMatchedProjects.forEach(p => {
                const key = p.configLink || p.subdomain || (p.name || '').toLowerCase();
                if (!seen.has(key)) { seen.add(key); uniqueProjects.push(p); }
            });

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            for (const [category, matchedProjects] of categoryToMatched.entries()) {
                const merged = new Map(); // operatorLower -> Set(columns)
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å
                const rulesResults = await runWithConcurrency(matchedProjects.map(p => () => fetchProjectRules(p)), CONCURRENT_LIMIT);
                rulesResults.forEach(({ access }) => {
                    access.forEach((colsSet, operator) => {
                        const op = operator.toLowerCase();
                        if (!merged.has(op)) merged.set(op, new Set());
                        colsSet.forEach(c => merged.get(op).add(c));
                    });
                });

                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
                if (columns && columns.length) {
                    const filtered = [];
                    merged.forEach((colsSet, op) => {
                        if (columns.every(c => colsSet.has(c))) filtered.push(op);
                    });
                    categoryResults.set(category, { type: 'flat', data: filtered.sort() });
                } else {
                    // –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–±–æ—Ä—É –∫–æ–ª–æ–Ω–æ–∫
                    const grouped = new Map();
                    merged.forEach((colsSet, op) => {
                        if (colsSet.size === 0) return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        const key = [...colsSet].sort((a,b)=>a-b).join(', ');
                        if (!grouped.has(key)) grouped.set(key, []);
                        grouped.get(key).push(op);
                    });
                    grouped.forEach(arr => arr.sort());
                    categoryResults.set(category, { type: 'grouped', data: grouped, projects: matchedProjects.map(p=>p.name || p.subdomain) });
                }
            }

            return categoryResults; // Map category -> {type, data, projects}
        }

        // –†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        function renderCategorySearchResults(categoryResults) {
            const container = document.getElementById('columnSearchResultsContainer');
            container.innerHTML = '';

            if (!categoryResults || categoryResults.size === 0) {
                container.innerHTML = '<p>–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.</p>';
                return;
            }

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å—É–µ–º –±–ª–æ–∫
            for (const [category, info] of categoryResults.entries()) {
                const safeId = makeSafeId(`cat-${category}`);
                let html = `<div class="operator-group" style="margin-bottom:12px;">`;
                html += `<div class="operator-group-header" style="display:flex; justify-content:space-between; align-items:center;"><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}</strong><span style="font-size:12px;color:#6c757d;">–ü—Ä–æ–µ–∫—Ç–æ–≤: ${ (info.projects||[]).length }</span></div>`;

                if (info.type === 'flat') {
                    if (!info.data.length) {
                        html += `<div style="padding-left:15px; margin-top:6px; color:#6c757d;">–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</div>`;
                    } else {
                        html += `<div style="padding-left:10px; margin-top:6px;">`;
                        info.data.forEach(op => {
                            html += `<div class="operator-group-item"><input type="checkbox" class="search-result-checkbox" value="${op}" checked> <label>${op}</label></div>`;
                        });
                        html += `</div>`;
                    }
                } else if (info.type === 'grouped') {
                    if (!info.data || info.data.size === 0) {
                        html += `<div style="padding-left:15px; margin-top:6px; color:#6c757d;">–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</div>`;
                    } else {
                        const sortedGroups = new Map([...info.data.entries()].sort());
                        html += `<div style="padding-left:10px; margin-top:6px;">`;
                        sortedGroups.forEach((operators, groupKey) => {
                            const gid = makeSafeId(`${safeId}-${groupKey}`);
                            html += `<div class="operator-group">
                                        <div class="operator-group-header" data-target="${gid}"><span>–ö–æ–ª–æ–Ω–∫–∏: ${groupKey} (${operators.length})</span><input type="checkbox" class="group-select-all-checkbox" title="–í—ã–±—Ä–∞—Ç—å –≤—Å—é –≥—Ä—É–ø–ø—É"></div>
                                        <div id="${gid}" class="operator-group-content">`;
                            operators.forEach(op => html += `<div class="operator-group-item"><input type="checkbox" class="search-result-checkbox" value="${op}"> <label>${op}</label></div>`);
                            html += `</div></div>`;
                        });
                        html += `</div>`;
                    }
                }

                html += `</div>`;
                container.innerHTML += html;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container.style.display = 'block';

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º" (–∫–∞–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º)
            const applySearchContainer = document.getElementById('applySearchContainer');
            if (applySearchContainer) {
                if (!categoryResults || categoryResults.size === 0) {
                    applySearchContainer.innerHTML = '';
                    applySearchContainer.style.display = 'none';
                } else {
                    let applyHtml = `
                        <label class="control-label">–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:</label>
                        <div class="checkbox-container" style="flex-direction: column; align-items: flex-start; gap: 5px; padding-left: 10px;">
                            <div class="operator-group-item">
                                <input type="checkbox" id="apply-to-all-settings-checkbox" class="access-checkbox">
                                <label for="apply-to-all-settings-checkbox" style="font-weight: bold;">–í—ã–±—Ä–∞—Ç—å –≤—Å–µ</label>
                            </div>`;

                    const fieldBlocks = document.querySelectorAll('.field-block');
                    fieldBlocks.forEach((block, index) => {
                        const title = block.querySelector('.field-block-title').childNodes[0].nodeValue.trim();
                        applyHtml += `
                            <div class="operator-group-item">
                                <input type="checkbox" class="apply-setting-checkbox access-checkbox" data-target-index="${index}" id="apply-setting-${index}">
                                <label for="apply-setting-${index}">${title}</label>
                            </div>`;
                    });

                    applyHtml += `</div><button id="applySelectedOperatorsBtn" class="access-button success-button" style="margin-top: 10px;">–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º</button>`;
                    applySearchContainer.innerHTML = applyHtml;
                    applySearchContainer.style.display = 'flex';
                }
            }
        }

        function renderSearchResults(results) {
            const columnSearchResultsContainer = document.getElementById('columnSearchResultsContainer');
            const applySearchContainer = document.getElementById('applySearchContainer');
            columnSearchResultsContainer.innerHTML = '';
            applySearchContainer.innerHTML = '';

            const hasOperators = (results.type === 'flat' && results.data.length > 0) || (results.type === 'grouped' && results.data.size > 0);

            if (results.type === 'flat') {
                if (!hasOperators) {
                    columnSearchResultsContainer.innerHTML = '<p>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
                } else {
                    results.data.forEach(op => {
                        columnSearchResultsContainer.innerHTML += `
                        <div class="operator-group-item">
                            <input type="checkbox" class="search-result-checkbox" value="${op}" checked>
                            <label>${op}</label>
                        </div>`;
                    });
                }
            } else if (results.type === 'grouped') {
                if (!hasOperators) {
                    columnSearchResultsContainer.innerHTML = '<p>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
                } else {
                    const sortedGroups = new Map([...results.data.entries()].sort());
                    sortedGroups.forEach((operators, groupKey) => {
                        const groupId = makeSafeId(`group-${groupKey}`);
                        const groupHtml = `
                        <div class="operator-group">
                            <div class="operator-group-header" data-target="${groupId}">
                                <span>–ö–æ–ª–æ–Ω–∫–∏: ${groupKey} (${operators.length})</span>
                                <input type="checkbox" class="group-select-all-checkbox" title="–í—ã–±—Ä–∞—Ç—å –≤—Å—é –≥—Ä—É–ø–ø—É">
                            </div>
                            <div id="${groupId}" class="operator-group-content">
                                ${operators.map(op => `
                                    <div class="operator-group-item">
                                        <input type="checkbox" class="search-result-checkbox" value="${op}">
                                        <label>${op}</label>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;
                        columnSearchResultsContainer.innerHTML += groupHtml;
                    });
                }
            }

            if (!hasOperators) {
                applySearchContainer.style.display = 'none';
                return;
            }

            let applyHtml = `
                <label class="control-label">–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:</label>
                <div class="checkbox-container" style="flex-direction: column; align-items: flex-start; gap: 5px; padding-left: 10px;">
                    <div class="operator-group-item">
                        <input type="checkbox" id="apply-to-all-settings-checkbox" class="access-checkbox">
                        <label for="apply-to-all-settings-checkbox" style="font-weight: bold;">–í—ã–±—Ä–∞—Ç—å –≤—Å–µ</label>
                    </div>`;

            const fieldBlocks = document.querySelectorAll('.field-block');
            fieldBlocks.forEach((block, index) => {
                const title = block.querySelector('.field-block-title').childNodes[0].nodeValue.trim();
                applyHtml += `
                    <div class="operator-group-item">
                        <input type="checkbox" class="apply-setting-checkbox access-checkbox" data-target-index="${index}" id="apply-setting-${index}">
                        <label for="apply-setting-${index}">${title}</label>
                    </div>`;
            });

            applyHtml += `</div><button id="applySelectedOperatorsBtn" class="access-button success-button" style="margin-top: 10px;">–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º</button>`;

            applySearchContainer.innerHTML = applyHtml;
            applySearchContainer.style.display = 'flex';
        }

        document.getElementById('columnSearchResultsContainer').addEventListener('click', event => {
            const header = event.target.closest('.operator-group-header');
            if (header && !event.target.classList.contains('group-select-all-checkbox')) {
                const targetId = header.dataset.target;
                if (!targetId) return;
                const content = document.getElementById(targetId);
                if (content) content.classList.toggle('visible');
            }

            if (event.target.classList.contains('group-select-all-checkbox')) {
                const group = event.target.closest('.operator-group');
                const isChecked = event.target.checked;
                group.querySelectorAll('.search-result-checkbox').forEach(cb => cb.checked = isChecked);
            }
        });

        (function() {
            const container = document.getElementById('applySearchContainer');
            if (!container) return;
            container.addEventListener('click', event => {
                const target = event.target;
                const applySearchContainer = document.getElementById('applySearchContainer');

                if (target.id === 'apply-to-all-settings-checkbox') {
                    const isChecked = target.checked;
                    applySearchContainer.querySelectorAll('.apply-setting-checkbox').forEach(cb => cb.checked = isChecked);
                    return;
                }

                if (target.id === 'applySelectedOperatorsBtn') {
                    // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ columnSearchResultsContainer, –∑–∞—Ç–µ–º –∏–∑ operatorAccessResultsContainer
                    const colContainer = document.getElementById('columnSearchResultsContainer');
                    const opContainer = document.getElementById('operatorAccessResultsContainer');
                    const fromColumn = colContainer ? Array.from(colContainer.querySelectorAll('.search-result-checkbox:checked')).map(cb => cb.value) : [];
                    let selectedOperators = Array.from(new Set(fromColumn));
                    if (!selectedOperators.length && opContainer) {
                        const fromOp = Array.from(opContainer.querySelectorAll('.search-result-checkbox:checked')).map(cb => cb.value);
                        selectedOperators = Array.from(new Set(fromOp));
                    }
                    if (!selectedOperators.length) {
                        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.');
                        return;
                    }

                    const selectedSettingsIndexes = Array.from(applySearchContainer.querySelectorAll('.apply-setting-checkbox:checked'))
                        .map(cb => cb.dataset.targetIndex);

                    if (selectedSettingsIndexes.length === 0) {
                        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.');
                        return;
                    }

                    const uniqueSorted = Array.from(new Set(selectedOperators)).sort((a,b)=>a.localeCompare(b, undefined, {sensitivity:'base'}));
                    const fieldBlocks = document.querySelectorAll('.field-block');
                    selectedSettingsIndexes.forEach(idx => {
                        const index = Number(idx);
                        const block = fieldBlocks[index];
                        if (block) {
                            const ta = block.querySelector('.usersInput.access-textarea');
                            if (ta) ta.value = uniqueSorted.join('\n');
                        }
                    });

                    // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –∏—Å—á–µ–∑–∞–ª–∞)
                    // –ü–æ–∫–∞–∂–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏ –Ω–µ –æ—á–∏—â–∞–µ–º UI
                    try {
                        // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                        const oldMsg = applySearchContainer.querySelector('.apply-status-msg');
                        if (oldMsg) oldMsg.remove();
                        const statusEl = document.createElement('div');
                        statusEl.className = 'apply-status-msg';
                        statusEl.style.color = 'var(--success-color)';
                        statusEl.style.fontSize = '13px';
                        statusEl.style.marginTop = '6px';
                        statusEl.textContent = `–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ ${selectedSettingsIndexes.length} –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.`;
                        applySearchContainer.appendChild(statusEl);

                        // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        setTimeout(() => {
                            const el = applySearchContainer.querySelector('.apply-status-msg');
                            if (el) el.remove();
                        }, 4000);
                    } catch (e) {
                        console.error('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:', e);
                    }
                }
            });
        })();

        document.getElementById('operatorAccessResultsContainer').addEventListener('click', event => {
            const icon = event.target.closest('.info-icon');
            if (icon) {
                const targetId = icon.dataset.targetId;
                if (!targetId) return;
                const detailsElement = document.getElementById(targetId);
                if (detailsElement) {
                    detailsElement.style.display = detailsElement.style.display === 'none' ? 'block' : 'none';
                }
            }
        });

        // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–û–ò–°–ö–ê –î–û–°–¢–£–ü–û–í –û–ü–ï–†–ê–¢–û–†–û–í ---

        async function findAccessForOperators(projects, targetOperators) {
            const allPromises = projects.map(fetchProjectRules);
            const resultsByProject = await Promise.all(allPromises);

            const operatorInfo = new Map();
            targetOperators.forEach(op => {
                operatorInfo.set(op.toLowerCase(), {
                    name: op,
                    foundIn: new Map(),
                    notFoundIn: new Set()
                });
            });

            resultsByProject.forEach(({ project, access, error }) => {
                if (error) return;

                operatorInfo.forEach((info, operatorLower) => {
                    if (access.has(operatorLower)) {
                        const accessibleColumns = access.get(operatorLower);
                        if (accessibleColumns.size > 0) {
                            info.foundIn.set(project.name, accessibleColumns);
                        }
                    } else {
                        info.notFoundIn.add(project.name);
                    }
                });
            });
            return operatorInfo;
        }

        function renderOperatorAccessResults(results) {
            const operatorAccessResultsContainer = document.getElementById('operatorAccessResultsContainer');
            operatorAccessResultsContainer.innerHTML = '';

            if (results.size === 0) {
                operatorAccessResultsContainer.innerHTML = '<p>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É –Ω–∏—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.</p>';
                return;
            }

            let html = '';
            let operatorIndex = 0;
            results.forEach(({ name, foundIn, notFoundIn }) => {
                const detailsId = `not-found-details-${operatorIndex}`;

                html += `<div class="operator-group" style="padding: 10px; border-radius: 6px; background: #f0f4f8; margin-bottom: 12px;">`;
                html += `<div class="operator-group-header" style="background: none; padding: 0; font-size: 16px; display: flex; justify-content: space-between; align-items: center;">`;
                html += `<strong>–û–ø–µ—Ä–∞—Ç–æ—Ä: ${name}</strong>`;

                if (notFoundIn.size > 0) {
                    html += `<span class="info-icon" title="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" data-target-id="${detailsId}" style="cursor: pointer; font-size: 18px;">‚ÑπÔ∏è</span>`;
                }
                html += `</div>`; // End of header

                if (notFoundIn.size > 0) {
                    html += `<div id="${detailsId}" class="not-found-details" style="display: none; padding: 8px; margin-top: 8px; background: #fffbe6; border: 1px solid #ffe58f; border-radius: 4px;">`;
                    html += `<strong style="font-size: 13px;">–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö:</strong><br/>`;
                    html += [...notFoundIn].sort().join('<br/>');
                    html += `</div>`;
                }

                if (foundIn.size === 0) {
                    html += `<div style="padding-left: 15px; margin-top: 5px; color: #6c757d;">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.</div>`;
                } else {
                    const sortedProjects = new Map([...foundIn.entries()].sort());
                    sortedProjects.forEach((columns, projectName) => {
                        const sortedColumns = [...columns].sort((a, b) => a - b).join(', ');
                        html += `<div style="padding-left: 15px; margin-top: 5px;"><strong>${projectName}:</strong> ${sortedColumns}</div>`;
                    });
                }
                html += `</div>`;
                operatorIndex++;
            });

            operatorAccessResultsContainer.innerHTML = html;
        }

        document.getElementById('runOperatorAccessSearchBtn').addEventListener('click', async (e) => {
            try { rulesCache && rulesCache.clear && rulesCache.clear(); } catch (err) { }
            const button = e.target;
            const operatorNames = document.getElementById('operatorAccessSearchTextarea').value.trim().split('\n').filter(Boolean).map(s => s.trim());

            if (operatorNames.length === 0) {
                alert('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.');
                return;
            }

            const selectedProjects = Array.from(document.querySelectorAll('#namesList input[type="checkbox"]:checked'))
                .map(cb => ({
                    name: cb.dataset.projectName,
                    configLink: cb.dataset.configLink
                }));

            if (selectedProjects.length === 0) {
                alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.');
                return;
            }

            const columnSearchResultsContainer = document.getElementById('columnSearchResultsContainer');
            const operatorAccessResultsContainer = document.getElementById('operatorAccessResultsContainer');
            const applySearchContainer = document.getElementById('applySearchContainer');

            button.disabled = true;
            button.textContent = '–ü–æ–∏—Å–∫...';
            operatorAccessResultsContainer.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            operatorAccessResultsContainer.style.display = 'block';
            columnSearchResultsContainer.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            columnSearchResultsContainer.innerHTML = '';
            applySearchContainer.style.display = 'none';

            try {
                const categorySearch = document.getElementById('categorySearchToggle').checked;

                if (categorySearch) {
                    operatorAccessResultsContainer.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
                    const results = await findAccessForOperatorsByCategory(selectedProjects, operatorNames);
                    renderOperatorAccessResultsByCategory(results);
                } else {
                    const results = await findAccessForOperators(selectedProjects, operatorNames);
                    renderOperatorAccessResults(results);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error);
                operatorAccessResultsContainer.innerHTML = '<p style="color: var(--danger-color);">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.</p>';
            } finally {
                button.disabled = false;
                button.textContent = '–ù–∞–π—Ç–∏';
            }
        });

        // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        async function findAccessForOperatorsByCategory(selectedProjects, targetOperators) {
            // selectedProjects: [{name, configLink, maybe subdomain}]
            // targetOperators: array of login strings
            const operatorsLower = targetOperators.map(o => o.toLowerCase());

            // –ü–æ—Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –ø–æ–¥–¥–æ–º–µ–Ω—É/–∏–º–µ–Ω–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const selectedMap = new Map();
            selectedProjects.forEach(p => {
                const key = (p.subdomain || (p.name || '')).toLowerCase();
                selectedMap.set(key, p);
            });

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑—å–º—ë–º –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏
            const result = new Map(); // category -> Map(operatorLower -> { foundIn: Map(project->Set(cols)), notFoundIn:Set })

            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä—ë–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categoryToMatched = new Map();
            const allMatched = [];
            for (const [category, projects] of projectCategories.entries()) {
                const matched = [];
                for (const frag of projects) {
                    const fragLower = frag.toLowerCase().trim();
                    for (const [key, p] of selectedMap.entries()) {
                        const keyLower = key.toLowerCase().trim();
                        const pnameLower = (p.name || '').toLowerCase().trim();

                        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
                        if (keyLower === fragLower || pnameLower === fragLower) {
                            if (!matched.some(mp => (mp.configLink || mp.name) === (p.configLink || p.name))) matched.push(p);
                        }
                    }
                }
                if (matched.length) {
                    categoryToMatched.set(category, matched);
                    matched.forEach(m => allMatched.push(m));
                }
            }

            if (allMatched.length === 0) return result;

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            for (const [category, matched] of categoryToMatched.entries()) {
                const mapForCategory = new Map();
                operatorsLower.forEach(op => mapForCategory.set(op, { name: op, foundIn: new Map(), notFoundIn: new Set() }));

                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const rulesResults = await runWithConcurrency(matched.map(p => () => fetchProjectRules(p)), CONCURRENT_LIMIT);

                // –ü—Ä–æ–±–µ–≥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                for (let i = 0; i < matched.length; i++) {
                    const project = matched[i];
                    const key = project.configLink || project.subdomain || project.name;
                    const rr = rulesResults[i] || rulesCache.get(key) || { access: new Map() };
                    const { access } = rr;
                    operatorsLower.forEach(opLower => {
                        if (access && access.has(opLower)) {
                            const cols = access.get(opLower);
                            if (cols && cols.size > 0) {
                                mapForCategory.get(opLower).foundIn.set(project.name || project.subdomain || key, cols);
                            }
                        } else {
                            mapForCategory.get(opLower).notFoundIn.add(project.name || project.subdomain || key);
                        }
                    });
                }

                result.set(category, mapForCategory);
            }

            return result; // Map category -> Map(operatorLower -> {name, foundIn, notFoundIn})
        }

        // –†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤)
        function renderOperatorAccessResultsByCategory(categoryResults) {
            const container = document.getElementById('operatorAccessResultsContainer');
            container.innerHTML = '';

            if (!categoryResults || categoryResults.size === 0) {
                container.innerHTML = '<p>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.</p>';
                return;
            }
            let html = '';
            let operatorIndex = 0;

            for (const [category, mapForCategory] of categoryResults.entries()) {
                // –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                html += `<div style="margin-bottom:8px;"><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}</strong></div>`;

                // mapForCategory: Map(opLower -> {name, foundIn, notFoundIn})
                mapForCategory.forEach((info, opLower) => {
                    const detailsId = `not-found-details-${makeSafeId(category)}-${operatorIndex}`;
                    html += `<div class="operator-group" style="padding: 10px; border-radius: 6px; background: #f0f4f8; margin-bottom: 12px;">`;
                    html += `<div class="operator-group-header" style="background: none; padding: 0; font-size: 16px; display: flex; justify-content: space-between; align-items: center;">`;
                    html += `<strong>–û–ø–µ—Ä–∞—Ç–æ—Ä: ${info.name}</strong>`;

                    if (info.notFoundIn && info.notFoundIn.size > 0) {
                        html += `<span class="info-icon" title="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" data-target-id="${detailsId}" style="cursor: pointer; font-size: 18px;">‚ÑπÔ∏è</span>`;
                    }
                    html += `</div>`; // end header

                    if (info.notFoundIn && info.notFoundIn.size > 0) {
                        html += `<div id="${detailsId}" class="not-found-details" style="display: none; padding: 8px; margin-top: 8px; background: #fffbe6; border: 1px solid #ffe58f; border-radius: 4px;">`;
                        html += `<strong style="font-size: 13px;">–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö:</strong><br/>`;
                        html += [...info.notFoundIn].sort().join('<br/>');
                        html += `</div>`;
                    }

                    if (!info.foundIn || info.foundIn.size === 0) {
                        html += `<div style="padding-left: 15px; margin-top: 5px; color: #6c757d;">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.</div>`;
                    } else {
                        const sortedProjects = new Map([...info.foundIn.entries()].sort());
                        sortedProjects.forEach((columns, projectName) => {
                            const sortedColumns = [...columns].sort((a, b) => a - b).join(', ');
                            html += `<div style="padding-left: 15px; margin-top: 5px;"><strong>${projectName}:</strong> ${sortedColumns}</div>`;
                        });
                    }

                    html += `</div>`; // end operator-group
                    operatorIndex++;
                });
            }

            container.innerHTML = html;
            container.style.display = 'block';

            // –ü—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ª–æ–≥–∏–Ω–∞–º/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            const applySearchContainer = document.getElementById('applySearchContainer');
            if (applySearchContainer) {
                applySearchContainer.innerHTML = '';
                applySearchContainer.style.display = 'none';
            }
        }

        // NOTE: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–¥–∞–ª—ë–Ω ‚Äî —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—ä–µ–¥–∏–Ω—ë–Ω —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º


        async function getActiveOperators(subdomain, water) {
            if (operatorsCache && operatorsCache[subdomain]) {
                return operatorsCache[subdomain];
            }

            return new Promise((resolve, reject) => {
                const url = `https://${subdomain}.leadvertex.ru/api/admin/getActiveOperators.html?token=${water}`;
                GM_xmlhttpRequest({
                    method: 'GET',
                    url: url,
                    onload: (response) => {
                        if (response.status === 200) {
                            try {
                                const data = JSON.parse(response.responseText);
                                operatorsCache[subdomain] = data;
                                resolve(data);
                            } catch (e) {
                                reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${e.message}`));
                            }
                        } else {
                            reject(new Error(`HTTP –æ—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`));
                        }
                    },
                    onerror: (err) => {
                        reject(new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${err.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`));
                    }
                });
            });
        }

        async function setOperatorRule(subdomain, trash, operatorID, group, type, set) {
            return new Promise((resolve, reject) => {
                const url = `https://${subdomain}.leadvertex.ru/api/callmode/v2/setOperatorRule.html?token=${trash}`;
                const params = new URLSearchParams();
                params.append('operatorID', operatorID);
                params.append('group', group);
                params.append('type', type);
                params.append('set', set);

                const requestData = params.toString();

                GM_xmlhttpRequest({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    data: requestData,
                    onload: (response) => {
                        if (response.status === 200) {
                            try {
                                const result = JSON.parse(response.responseText);
                                if (result.result === 'OK') {
                                    resolve(true);
                                } else {
                                    reject(new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(result)}`));
                                }
                            } catch (e) {
                                reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${e.message}`));
                            }
                        } else {
                            reject(new Error(`HTTP –æ—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`));
                        }
                    },
                    onerror: (err) => {
                        reject(new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${err.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`));
                    }
                });
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        function updateProgress(current, total) {
            const progressFill = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            const percent = Math.round((current / total) * 100);

            progressFill.style.width = `${percent}%`;
            progressText.textContent = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${current} / ${total}`;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('confirmButton').addEventListener('click', async () => {
            const useLegacyMode = document.getElementById('legacyModeToggle').checked;

            if (useLegacyMode) {
                // --- –õ–û–ì–ò–ö–ê –°–¢–ê–†–û–ô –í–ï–†–°–ò–ò (UI) ---
                const selectedLinks = Array.from(document.querySelectorAll('#namesList input[type="checkbox"]:checked')).map(cb => cb.dataset.configLink);
                const use15Columns = document.getElementById('columnRangeToggle').checked;

                if (!selectedLinks.length) {
                    alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É.");
                    return;
                }

                sessionStorage.setItem('use15Columns', use15Columns);

                const fieldBlocks = document.querySelectorAll('.field-block');
                const blocksData = Array.from(fieldBlocks).map(block => {
                     const actionValue = block.querySelector('.actionSelect').value;
                     const columnsInputValue = block.querySelector('.columnsInput').value.trim();
                     const usersInputValue = block.querySelector('.usersInput').value.trim();

                     return {
                        columnsInput: columnsInputValue.toLowerCase(),
                        columns: columnsInputValue.split(' ').map(Number).filter(Boolean),
                        users: usersInputValue.split('\n').map(user => user.trim().toLowerCase()).filter(Boolean),
                        action: actionValue === "1" ? "–≤–∫–ª—é—á–∏—Ç—å" : "–æ—Ç–∫–ª—é—á–∏—Ç—å"
                    };
                });

                if (blocksData.some(data => (!data.columns.length && data.columnsInput !== 'all') || (!data.users.length && !data.users.includes('all')))) {
                    alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ–ª–æ–Ω–æ–∫ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.");
                    return;
                }

                sessionStorage.setItem('selectedLinks', JSON.stringify(selectedLinks));
                sessionStorage.setItem('blocksData', JSON.stringify(blocksData));

                alert("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ...");
                window.location.href = selectedLinks[0];

            } else {
                // --- –õ–û–ì–ò–ö–ê –ù–û–í–û–ô –í–ï–†–°–ò–ò (API) ---
                const settings = GM_getValue(swap);

                if (!settings || !settings.encryptedKey || !settings.secret) {
                    alert("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é Tampermonkey.");
                    return;
                }

                let top;
                try {
                    top = decrypt(settings.encryptedKey, settings.secret);
                    if (!top) throw new Error("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.");
                } catch (e) {
                    alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞: ${e.message}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.`);
                    return;
                }

                const selectedProjects = Array.from(document.querySelectorAll('#namesList input[type="checkbox"]:checked'))
                    .map(cb => ({
                        subdomain: cb.value,
                        name: cb.dataset.projectName || cb.value
                    }));

                const use15Columns = document.getElementById('columnRangeToggle').checked;
                const columnMap = use15Columns ? columnMap15 : columnMap9;
                const allColumns = Object.keys(columnMap).map(Number);

                if (!selectedProjects.length) {
                    alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç.");
                    return;
                }

                const fieldBlocks = document.querySelectorAll('.field-block');
                const blocksData = Array.from(fieldBlocks).map(block => {
                    const columnsInput = block.querySelector('.columnsInput').value.trim().toLowerCase();
                    let columns;

                    if (columnsInput === 'all') {
                        columns = allColumns;
                    } else {
                        columns = columnsInput.split(' ').map(Number).filter(Boolean);
                    }

                    return {
                        columns: columns,
                        users: block.querySelector('.usersInput').value.trim().split('\n').map(user => user.trim()).filter(Boolean),
                        action: block.querySelector('.actionSelect').value
                    };
                });

                const templatesPerSetting = document.getElementById('templatesPerSettingToggle')?.checked;
                const perBlockProjects = [];

                if (templatesPerSetting) {
                    Array.from(fieldBlocks).forEach(block => {
                        const catSel = block.querySelector('.categorySelect');

                        if (catSel && catSel.value) {
                            const cat = catSel.value;
                            let fragments = projectCategories.get(cat) || [];

                            if (fragments.length === 0) {
                                fragments = [cat];
                            }

                            const matched = [];
                            const allProjectItems = document.querySelectorAll('#namesList .project-item');

                            allProjectItems.forEach(item => {
                                const cb = item.querySelector('input[type="checkbox"]');
                                const label = item.querySelector('.project-name');
                                if (!cb || !label) return;
                                const pname = label.textContent.trim().toLowerCase();
                                const sub = cb.value.toLowerCase();
                                const isMatch = fragments.some(f => {
                                    const fLower = f.toLowerCase().trim();
                                    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Å—É–±–¥–æ–º–µ–Ω–∞
                                    return pname === fLower || sub === fLower;
                                });

                                if (isMatch) {
                                    matched.push({ subdomain: cb.value, name: label.textContent.trim() });
                                }
                            });

                            perBlockProjects.push({ projects: matched, hasCategory: true });
                        } else {
                            perBlockProjects.push({ projects: [], hasCategory: false });
                        }
                    });
                }

                if (blocksData.some(data => !data.columns.length || !data.users.length)) {
                    alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ–ª–æ–Ω–æ–∫ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.");
                    return;
                }

                const confirmButton = document.getElementById('confirmButton');
                document.getElementById('progressContainer').style.display = 'block';
                confirmButton.disabled = true;
                confirmButton.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';

                const tasks = [];
                const operatorsByDomain = {};

                // –°–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
                const allProjectsToFetch = new Map(); // subdomain -> {subdomain, name}
                if (templatesPerSetting) {
                    perBlockProjects.forEach(blockInfo => {
                        if (blockInfo.hasCategory) {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                            blockInfo.projects.forEach(p => allProjectsToFetch.set(p.subdomain, p));
                        } else {
                            // –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
                            selectedProjects.forEach(p => allProjectsToFetch.set(p.subdomain, p));
                        }
                    });
                } else {
                    // –ë–µ–∑ per-setting mode ‚Äî –≤—Å–µ–≥–¥–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ selectedProjects
                    selectedProjects.forEach(p => allProjectsToFetch.set(p.subdomain, p));
                }

                // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, —Å –ª–∏–º–∏—Ç–æ–º)
                const fetchFns = Array.from(allProjectsToFetch.values()).map(project => {
                    return async () => {
                        const subdomain = project.subdomain;
                        try {
                            operatorsByDomain[subdomain] = await getActiveOperators(subdomain, top);
                        } catch (error) {
                            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è ${subdomain}:`, error);
                            operatorsByDomain[subdomain] = null;
                        }
                    };
                });

                await runWithConcurrency(fetchFns, CONCURRENT_LIMIT);

                // –ü–æ—Å—Ç—Ä–æ–∏–º –∑–∞–¥–∞—á–∏: –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø–æ –µ—ë —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∏–ª–∏ –ø–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)
                for (let i = 0; i < blocksData.length; i++) {
                    const blockData = blocksData[i];
                    const { columns, users, action } = blockData;

                    let projectsForBlock = selectedProjects;
                    if (templatesPerSetting && perBlockProjects[i]) {
                        if (perBlockProjects[i].hasCategory) {
                            projectsForBlock = perBlockProjects[i].projects;
                            if (projectsForBlock.length === 0) {
                                continue;
                            }
                        }
                    }

                        for (const project of projectsForBlock) {
                            const { subdomain, name } = project;
                            const operators = operatorsByDomain[subdomain];
                            if (!operators) continue;

                            const loginToIds = {};
                            for (const [id, login] of Object.entries(operators)) {
                                const key = (login || '').toLowerCase();
                                if (!loginToIds[key]) loginToIds[key] = [];
                                loginToIds[key].push(id);
                            }

                            let operatorIds = [];
                            if (users.includes("all")) {
                                operatorIds = Object.keys(operators);
                            } else {
                                for (const user of users) {
                                    const key = user.toLowerCase();
                                    if (loginToIds[key]) operatorIds.push(...loginToIds[key]);
                                }
                            }

                            // –î–µ–¥—É–ø –∏ push –∑–∞–¥–∞—á
                            const uniqueOpIds = Array.from(new Set(operatorIds));
                            for (const operatorId of uniqueOpIds) {
                                const operatorLogin = operators[operatorId];
                                for (const column of columns) {
                                    const { group, type } = columnMap[column];
                                    tasks.push(() => setOperatorRule(subdomain, top, operatorId, group, type, action).catch(error => {
                                        console.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è ${operatorLogin} –≤ ${name}:`, error);
                                    }));
                                }
                            }
                        }
                }

                const totalOperations = tasks.length;
                let completedOperations = 0;
                updateProgress(0, totalOperations);

                // –í—ã–ø–æ–ª–Ω–∏–º –∑–∞–¥–∞—á–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                const wrappedTasks = tasks.map(fn => async () => {
                    await fn();
                    completedOperations++;
                    updateProgress(completedOperations, totalOperations);
                });

                await runWithConcurrency(wrappedTasks, CONCURRENT_LIMIT);

                // –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                confirmButton.disabled = false;
                confirmButton.textContent = '–ü—Ä–∏–º–µ–Ω–∏—Ç—å';
            }
        });
    }

     if (location.href.includes("rules.html")) {
        const selectedLinks = JSON.parse(sessionStorage.getItem('selectedLinks') || "[]");
        const blocksData = JSON.parse(sessionStorage.getItem('blocksData') || "[]");
        const use15Columns = JSON.parse(sessionStorage.getItem('use15Columns'));
        const columnMap = use15Columns ? columnMap15 : columnMap9;

        let isProcessing = false;

        if (!selectedLinks.length || !blocksData.length) {
            return;
        }

        async function processCurrentPage(targetUsers, columns, enable, columnsInput) {
            let processedOperators = 0;
            return new Promise(resolve => {
                const applyToAll = targetUsers.includes("all");
                const useAllColumns = columnsInput === "all";

                if (useAllColumns) {
                    columns = Object.keys(columnMap).map(Number);
                }

                if (applyToAll) {
                    let clickedCount = 0;
                    columns.forEach(column => {
                        const mapping = columnMap[column];
                        if (mapping) {
                            const { group, type } = mapping;
                            const toggle = document.querySelector(`a.operator-rules-toggle[data-group="${group}"][data-type="${type}"]`);
                            if (toggle) {
                                const icon = toggle.querySelector('i');
                                const isOn = icon && icon.classList.contains('fa-toggle-on');

                                if ((enable && !isOn) || (!enable && isOn)) {
                                    toggle.click();
                                    clickedCount++;
                                }
                            }
                        }
                    });
                    console.log(`[DEBUG] –†–µ–∂–∏–º all: –∫–ª–∏–∫–Ω—É—Ç–æ ${clickedCount} —Ç—É–º–±–ª–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è ${enable ? '–≤–∫–ª—é—á–µ–Ω–∏—è' : '–æ—Ç–∫–ª—é—á–µ–Ω–∏—è'}.`);
                    setTimeout(() => resolve(clickedCount), 1000);
                    return;
                }

                const rows = document.querySelectorAll("tr");

                rows.forEach(row => {
                    const usernameElement = row.querySelector("td:first-child");
                    const username = usernameElement?.textContent?.trim().toLowerCase();

                    if (username && targetUsers.includes(username)) {
                        processedOperators++;
                        columns.forEach(column => {
                            const mapping = columnMap[column];
                            if (mapping) {
                                const { group, type } = mapping;
                                const checkbox = row.querySelector(`td[data-group="${group}"][data-type="${type}"] input[type="checkbox"]`);
                                if (checkbox) {
                                    if ((enable && !checkbox.checked) || (!enable && checkbox.checked)) {
                                        checkbox.click();
                                    }
                                }
                            }
                        });
                    }
                });
                setTimeout(() => resolve(processedOperators), 300);
            });
        }

        async function processPages() {
            if (isProcessing) return;
            isProcessing = true;

            let totalPageOperators = 0;
            for (const { columns, users, action, columnsInput } of blocksData) {
                const processedCount = await processCurrentPage(users, columns, action === "–≤–∫–ª—é—á–∏—Ç—å", columnsInput);
                totalPageOperators += processedCount;
            }

            const delayPerOperator = 75;
            const totalDelay = Math.max(totalPageOperators * delayPerOperator, 5000); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫

            await new Promise(resolve => setTimeout(resolve, totalDelay));

            const remainingLinks = selectedLinks.slice(1);
            sessionStorage.setItem('selectedLinks', JSON.stringify(remainingLinks));

            if (remainingLinks.length > 0) {
                window.location.href = remainingLinks[0];
            } else {
                alert("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                sessionStorage.clear();
            }
        }
        processPages();
    }
})();

